[tool.poetry]
name = "langchain-azure-postgresql"
version = "0.1.0"
description = "LangChain VectorStore integrations for Azure Database for PostgreSQL"
authors = [
    "Arda Aytekin <8845951+aytekinar@users.noreply.github.com>",
    "Orhan Kislal <kislalorhan@microsoft.com>"
]
license = "MIT"
readme = "README.md"
repository = "https://github.com/langchain-ai/langchain-azure"
homepage = "https://github.com/langchain-ai/langchain-azure"
keywords = ["LangChain", "Azure", "PostgreSQL", "VectorStore"]
classifiers = [
    "Programming Language :: Python :: 3.10",
    "License :: OSI Approved :: MIT License"
]

[tool.poetry.dependencies]
python = "~3.10"
aiohttp = "~3.0"
azure-identity = "~1.0"
langchain-core = "~0.3.0"
numpy = "~2.0"
pgvector = "~0.4.0"
psycopg = {extras = ["binary", "pool"], version = "~3.0"}
pydantic = "~2.0"
simsimd = "~6.0"
typing-extensions = { version = "~4.0", markers = "python_version < '3.12'" }

[tool.poetry.extras]
# If you want to support optional features, list them here.

[tool.poetry.group.dev.dependencies]
jupyterlab = "~4.0"
langchain = "~0.3.0"
langchain-openai = "~0.3.0"
openai = "~1.0"

[tool.poetry.group.lint.dependencies]
ruff = "~0.12.0"

[tool.poetry.group.package.dependencies]
build = {extras = ["uv"], version = "~1.0"}
twine = "~6.0"

[tool.poetry.group.test.dependencies]
pytest = "~8.0"
pytest-asyncio = "~1.0"
pytest-cov = "~6.0"
tox = "~4.0"
tox-uv = "~1.0"

[tool.poetry.group.type.dependencies]
mypy = "~1.0"

[build-system]
requires = ["poetry-core>=1.7.0"]
build-backend = "poetry.core.masonry.api"

[tool.coverage.run]
omit = ["tests/*"]

[tool.pytest.ini_options]
addopts = [
    "--cov=langchain_azure_postgresql",
    "--cov-report=html:htmlcov/pytest",
    "--cov-report=term",
    "--doctest-continue-on-failure",
    "--doctest-modules",
    "--import-mode=importlib",
    "-p no:legacypath",
    "-r a",
    "--strict-markers",
    "--verbose"
]
asyncio_default_fixture_loop_scope = "session"
asyncio_default_test_loop_scope = "session"
asyncio_mode = "auto"
doctest_encoding = "utf-8"
doctest_optionflags = [
    "IGNORE_EXCEPTION_DETAIL",
    "NUMBER",
    "NORMALIZE_WHITESPACE"
]
log_date_format = "%Y-%m-%dT%H:%M:%S%Z"
log_format = "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
log_level = "DEBUG"
xfail_strict = true

[tool.ruff.lint]
extend-select = ["UP", "D", "SIM", "I", "RUF100"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.tox]
requires = ["tox~=4.0", "tox-uv~=1.0"]
env_list = ["lint", "package", "type", "3.10", "3.11", "3.12", "3.13"]

[tool.tox.env_run_base]
description = "Run tests under Python {base_python}"
extras = ["langchain"]
dependency_groups = ["test"]
labels = ["test"]
commands = [["pytest", "--cov-report=html:htmlcov/{base_python}"]]
pass_env = [
    "AZURE_CLIENT_*",
    "AZURE_TENANT_*",
    "PGAPPNAME",
    "PGDATABASE",
    "PGHOST",
    "PGPASSWORD",
    "PGPORT",
    "PGUSER"
]

[tool.tox.env.lint]
description = "Run lint checks on the code base"
skip_install = true
dependency_groups = ["lint"]
labels = ["lint"]
commands = [["ruff", "check", "src"], ["ruff", "check", "tests"]]

[tool.tox.env.type]
description = "Run type checks on the code base"
extras = ["langchain"]
dependency_groups = ["test", "type"]
labels = ["type"]
commands = [["mypy", "src"], ["mypy", "tests"]]

[tool.tox.env.package]
description = "Run packaging checks on the code base"
skip_install = true
dependency_groups = ["package"]
labels = ["package"]
commands = [
    ["python", "-m", "build", "--installer", "uv", "--outdir", "dist"],
    ["twine", "check", "dist/*"]
]

[tool.uv]
default-groups = ["dev", "lint", "package", "test", "type"]
