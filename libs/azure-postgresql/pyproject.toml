# Project-related metadata for the LangChain Azure PostgreSQL library.
[project]
name = "langchain-azure-postgresql"
version = "0.1.0"
description = "LangChain VectorStore integrations for Azure Database for PostgreSQL"
readme = "README.md"
license = { text = "MIT" }
authors = [
  { name = "Arda Aytekin", email = "8845951+aytekinar@users.noreply.github.com" },
  { name = "Orhan Kislal", email = "kislalorhan@microsoft.com" },
]
requires-python = "~=3.10"
dependencies = [
  # aiohttp needed for azure.identity.aio; should we make it optional?
  "aiohttp~=3.0",
  "azure-identity~=1.0",
  "langchain-core~=0.3.0",     # Core LangChain library; includes base classes and utilities
  "numpy~=2.0",
  "pgvector~=0.4.0",
  "psycopg[binary,pool]~=3.0",
  "pydantic~=2.0",
  "simsimd~=6.0",              # needed for LangChain's mmr search functionality
  # Needed for typing.Self in 3.10 and typing.override in 3.11
  "typing-extensions~=4.0; python_version < '3.12'",
]

# Build system configuration for the project.
[build-system]
requires = ["hatchling~=1.0"]
build-backend = "hatchling.build"

# Dependency groups for development, linting, testing, and type checking.
[dependency-groups]
dev = [
  "jupyterlab~=4.0",
  "langchain~=0.3.0",
  "langchain-openai~=0.3.0",
  "openai~=1.0",
]
lint = ["ruff~=0.12.0"]
package = ["build[uv]~=1.0", "twine~=6.0"]
test = [
  "pytest~=8.0",
  "pytest-asyncio~=1.0",
  "pytest-cov~=6.0",
  "tox~=4.0",
  "tox-uv~=1.0",
]
type = ["mypy~=1.0"]

# Configuration for Coverage.py, which is used by pytest-cov internally.
[tool.coverage.run]
omit = ["tests/*"]

# Configuration for Hatch, the chosen build system for the project.
[tool.hatch.build.targets.sdist]
only-include = ["src/langchain_azure_postgresql"]

[tool.hatch.build.targets.wheel]
sources = ["src"]
only-include = ["src/langchain_azure_postgresql"]

# Configuration for pytest, the testing framework used in the project.
[tool.pytest.ini_options]
addopts = [
  "--cov=langchain_azure_postgresql", # Specify the package to measure coverage for
  "--cov-report=html:htmlcov/pytest", # Generate HTML coverage report under the htmlcov directory
  "--cov-report=term",                # Report coverage in the terminal
  "--doctest-continue-on-failure",    # Continue running doctests even if some fail
  "--doctest-modules",                # Enable doctest modules
  "--import-mode=importlib",          # Use importlib for (test) module imports
  "-p no:legacypath",                 # Disable legacy path handling plugin
  "-r a",                             # Show a short test summary for all but passed tests
  "--strict-markers",                 # Enable strict markers to ensure all markers are defined
  "--verbose",                        # Enable verbose output for pytest
]
asyncio_default_fixture_loop_scope = "session" # Default event loop scope for asyncio fixtures
asyncio_default_test_loop_scope = "session" # Default event loop scope for asyncio tests
asyncio_mode = "auto" # Automatically detect asyncio mode
doctest_encoding = "utf-8" # Set encoding for doctests
doctest_optionflags = [
  "IGNORE_EXCEPTION_DETAIL", # Ignore exception details in doctests
  "NUMBER",                  # Match floating-point numbers to the precision written in the expected doctest output
  "NORMALIZE_WHITESPACE",    # Normalize whitespace in doctests
]
# log_date_format and log_format mess with TOML parsing/formatting; hence, try
# commenting them out when/if needed.
log_date_format = "%Y-%m-%dT%H:%M:%S%Z" # Date format for captured logs in pytest
log_format = "%(asctime)s - %(name)s - %(levelname)s - %(message)s" # Log format for captured logs in pytest
log_level = "DEBUG" # Set the log level for pytest
xfail_strict = true # Treat xfail tests as failures if they pass

# Configuration for Ruff, the linter used in the project.
[tool.ruff.lint]
extend-select = [
  "UP",     # pyupgrade
  "D",      # pydocstyle
  "SIM",    # flake8-simplify
  "I",      # isort
  "RUF100", # unused noqa
]

[tool.ruff.lint.pydocstyle]
convention = "google" # Use Google style guide for docstrings

# Configuration for Tox, the test automation framework used in the project.
[tool.tox]
requires = ["tox~=4.0", "tox-uv~=1.0"]
env_list = ["lint", "package", "type", "3.10", "3.11", "3.12", "3.13"]

# Base environment configuration, which is inherited by all environments.
[tool.tox.env_run_base]
description = "Run tests under Python {base_python}"
extras = ["langchain"]
dependency_groups = ["test"]
labels = ["test"]
commands = [["pytest", "--cov-report=html:htmlcov/{base_python}"]]
pass_env = [
  "AZURE_CLIENT_*",
  "AZURE_TENANT_*",
  "PGAPPNAME",
  "PGDATABASE",
  "PGHOST",
  "PGPASSWORD",
  "PGPORT",
  "PGUSER",
]

# Environment configuration for the "lint" environment.
[tool.tox.env.lint]
description = "Run lint checks on the code base"
skip_install = true
dependency_groups = ["lint"]
labels = ["lint"]
commands = [["ruff", "check", "src"], ["ruff", "check", "tests"]]

# Environment configuration for the "test" environment.
[tool.tox.env.type]
description = "Run type checks on the code base"
extras = ["langchain"]
dependency_groups = ["test", "type"]
labels = ["type"]
commands = [["mypy", "src"], ["mypy", "tests"]]

[tool.tox.env.package]
description = "Run packaging checks on the code base"
skip_install = true
dependency_groups = ["package"]
labels = ["package"]
commands = [
  [
    "python",
    "-m",
    "build",
    "--installer",
    "uv",
    "--outdir",
    "dist",
  ],
  [
    "twine",
    "check",
    "dist/*",
  ],
]

# Configuration for uv, the project management tool used in the project.
[tool.uv]
# Dependency groups to install by default
default-groups = ["dev", "lint", "package", "test", "type"]
