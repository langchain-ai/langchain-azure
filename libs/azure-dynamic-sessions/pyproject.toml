[project]
name = "langchain-azure-dynamic-sessions"
version = "0.2.0"
description = "An integration package connecting Azure Container Apps dynamic sessions and LangChain"
license = { file = "LICENSE" }
readme = "README.md"
requires-python = "~=3.9"

dependencies = [
  "azure-identity~=1.16",
  "langchain-core~=0.3.0",
  "requests~=2.31",
]

[project.urls]
repository = "https://github.com/langchain-ai/langchain-azure"
"Source Code" = "https://github.com/langchain-ai/langchain-azure/tree/main/libs/azure-dynamic-sessions"
"Release Notes" = "https://github.com/langchain-ai/langchain-azure/releases"

[build-system]
requires = ["poetry-core~=2.0"]
build-backend = "poetry.core.masonry.api"

[tool.coverage.run]
omit = ["tests/*"]

[tool.mypy]
disallow_untyped_defs = true

[tool.poetry.group.codespell]
optional = true

[tool.poetry.group.codespell.dependencies]
codespell = "~=2.2"

[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
ipykernel = "~6.29"
langchain-core = { git = "https://github.com/langchain-ai/langchain.git", subdirectory = "libs/core" }
langchain-openai = { git = "https://github.com/langchain-ai/langchain.git", subdirectory = "libs/partners/openai" }
langchainhub = "~=0.1.15"

[tool.poetry.group.lint]
optional = true

[tool.poetry.group.lint.dependencies]
# TODO: hack to fix 3.9 builds
cffi = [
  { version = "<1.17.1", python = "<3.10" },
  { version = "*", python = ">=3.10" },
]
pytest = "~=7.4"
python-dotenv = "~=1.0"
ruff = "~=0.5.0"

[tool.poetry.group.test]
optional = true

[tool.poetry.group.test.dependencies]
# TODO: hack to fix 3.9 builds
cffi = [
  { version = "<1.17.1", python = "<3.10" },
  { version = "*", python = ">=3.10" },
]
freezegun = "~=1.2"
langchain-core = { git = "https://github.com/langchain-ai/langchain.git", subdirectory = "libs/core" }
pytest = "~=7.4"
pytest-asyncio = "~=0.21.1"
pytest-mock = "~=3.10"
pytest-watcher = "~=0.3.4"
python-dotenv = "~=1.0"
syrupy = "~=4.0"

[tool.poetry.group.test_integration]
optional = true

[tool.poetry.group.test_integration.dependencies]
pytest = "~=7.4"
python-dotenv = "~=1.0"

[tool.poetry.group.typing.dependencies]
langchain-core = { git = "https://github.com/langchain-ai/langchain.git", subdirectory = "libs/core" }
mypy = "~=1.10"
types-requests = "~=2.31"

[tool.pytest.ini_options]
addopts = [
  "--durations=5",
  "--snapshot-warn-unused",
  "--strict-config",
  "--strict-markers",
]
markers = [
  "compile: mark placeholder test used to compile integration tests without running them",
  "requires: mark tests as requiring a specific library",
]
asyncio_mode = "auto"

[tool.ruff.lint]
select = ["E", "F", "I", "D"]

[tool.ruff.lint.per-file-ignores]
"tests/**" = ["D"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.uv]
default-groups = ["typing"]

[dependency-groups]
codespell = ["codespell~=2.2"]
dev = [
  "ipykernel~=6.29",
  "langchain-core",
  "langchain-openai",
  "langchainhub~=0.1.15",
]
lint = [
  "cffi<1.17.1; python_version < '3.10'",
  "cffi; python_version >= '3.10'",
  "pytest~=7.4",
  "python-dotenv~=1.0",
  "ruff~=0.5.0",
]
test = [
  "cffi<1.17.1; python_version < '3.10'",
  "cffi; python_version >= '3.10'",
  "freezegun~=1.2",
  "langchain-core",
  "pytest~=7.4",
  "pytest-asyncio~=0.21.1",
  "pytest-mock~=3.10",
  "pytest-watcher~=0.3.4",
  "python-dotenv~=1.0",
  "syrupy~=4.0",
]
test_integration = ["pytest~=7.4", "python-dotenv~=1.0"]
typing = ["langchain-core", "mypy~=1.10", "types-requests~=2.31"]

[tool.uv.sources]
langchain-core = { git = "https://github.com/langchain-ai/langchain.git", subdirectory = "libs/core" }
langchain-openai = { git = "https://github.com/langchain-ai/langchain.git", subdirectory = "libs/partners/openai" }
